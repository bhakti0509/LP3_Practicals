import warnings
 warnings.filterwarnings('ignore')
 import pandas as pd
 import numpy as np
 import matplotlib.pyplot as plt
 import seaborn as sns
 from sklearn.cluster import KMeans
 from sklearn.preprocessing import StandardScaler
 from sklearn.decomposition import PCA
 from scipy.cluster.hierarchy import dendrogram, linkage
 from sklearn.cluster import AgglomerativeClustering

 # Load the dataset
 file_path = "sales_data_sample.csv"
 sales_data = pd.read_csv(file_path, encoding='Latin-1')
 sales_data

sales_data.info()

sales_data.head()

sales_data.tail()

sales_data.shape

sales_data.describe()

sales_data.dtypes

sales_data.isnull().sum()

# Select numeric columns for clustering
 numeric_data = sales_data.select_dtypes(include=[np.number])

# Handle missing values if any
 numeric_data = numeric_data.dropna()

# Standardize the data
 scaler = StandardScaler()
 scaled_data = scaler.fit_transform(numeric_data)

# Determine the optimal number of clusters using the elbow method
 sse = []
 k_range = range(1, 11)
 for k in k_range:
 kmeans = KMeans(n_clusters=k, random_state=42)
kmeans.fit(scaled_data)
 sse.append(kmeans.inertia_)
 # Plot the elbow graph
 plt.figure(figsize=(10, 6))
 plt.plot(k_range, sse, marker='o')
 plt.title('Elbow Method')
 plt.xlabel('Number of Clusters')
 plt.ylabel('Sum of Squared Errors (SSE)')
 plt.show()

# Suppose the optimal number of clusters from the elbow method is 3
 optimal_clusters = 3

# Apply K-Means clustering
 kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
 kmeans.fit(scaled_data)
 sales_data['Cluster'] = kmeans.labels_

# Visualize the clusters using PCA for dimensionality reduction
 pca = PCA(n_components=2)
 pca_data = pca.fit_transform(scaled_data)
 plt.figure(figsize=(10, 6))
sns.scatterplot(x=pca_data[:, 0], y=pca_data[:, 1], hue=sales_data['Cluster'],palette='viridis')
 plt.title('Clusters Visualization')
 plt.show()

 # Group by 'Cluster' and calculate the mean for only numeric columns
 numeric_columns = sales_data.select_dtypes(include=[np.number]).columns
 cluster_analysis = sales_data.groupby('Cluster')[numeric_columns].mean()
 print("Cluster Analysis:\n", cluster_analysis)

