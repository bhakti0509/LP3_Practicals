import java.util.Scanner;

public class NQueens {

    public static boolean isSafe(int[][] board, int row, int col) {
        // Check this column on upper side
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 1) {
                return false;
            }
        }

        // Check upper diagonal on left side
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 1) {
                return false;
            }
        }

        // Check upper diagonal on right side
        for (int i = row, j = col; i >= 0 && j < board.length; i--, j++) {
            if (board[i][j] == 1) {
                return false;
            }
        }

        return true;
    }

    public static void solveNQueens(int[][] board, int row) {
        if (row >= board.length) {
            printBoard(board);
            return; // Change this to return all solutions instead of stopping at first
        }

        for (int col = 0; col < board.length; col++) {
            if (isSafe(board, row, col)) {
                board[row][col] = 1; // Place queen
                solveNQueens(board, row + 1); // Recur to place the rest
                board[row][col] = 0; // Backtrack
            }
        }
    }

    public static void printBoard(int[][] board) {
        for (int[] row : board) {
            for (int cell : row) {
                System.out.print(cell == 1 ? "Q " : ". ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the size of the board: ");
        int N = scanner.nextInt();
        int[][] board = new int[N][N];

        // Place the first queen at (0, 0)
        board[0][0] = 1;

        // Solve for the remaining queens
        solveNQueens(board, 1);
        
        scanner.close();
    }
}
