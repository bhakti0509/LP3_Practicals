import warnings
warnings.filterwarnings('ignore')
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score,recall_score 

df = pd.read_csv("diabetes.csv")
df

df.info()  

df .head () 

df.tail() 

df .tail() 

df .describe() 

df.dtypes 

df.isnull().sum() 

df.columns 

#Feature scaling
x = df.drop(columns=['Outcome'])
y = df ['Outcome'] 

scaler = StandardScaler()
x_scaled = scaler.fit_transform(x)
X_train, x_test, y_train, y_test = train_test_split(x_scaled, y, test_size=0.2,random_state=42) 

 #KNN classifier
knn = KNeighborsClassifier(n_neighbors=7)
knn.fit(x_train, y_train)
y_pred = knn.predict (x_test)

#Confusion matriz
cm = confusion_matrix(y_test, y_pred)
print ("Confusion Matrix:")
print (cm) 

#Accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}") 

#Error Tate
error_rate = 1 - accuracy
print (f"Error Rate: {error_rate:.2f}") 

#Precision
precision = precision_score(y_test, y_pred)
print (f"Precision: {precision:.2f}") 

#Recall
recall = recall_score(y_test, y_pred)
print(f"Recall: {recall:.2f}") 

#Classification Report
cr = metrics.classification_report(y_test,y_pred)
print("Classification report: \n\n", cr) 




